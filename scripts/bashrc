shopt -s promptvars
########################################
script_file="${BASH_SOURCE[0]##*/}"
script_path="$( cd "$( echo "${BASH_SOURCE[0]%/*}" )" && pwd )"
# file_extension="${file%.*}"
# file_name="${file##*.}"
########################################

PS1='\n\[\033[0;36m\]\h\[\033[0m\]:\[\033[0;35m\]\u\[\033[0m\] \W [\#]:\n\$ '
PS1='$(printf "%$((COLUMNS-1))s\r")'$PS1

# export JAVA_HOME=$(type -p javac|xargs readlink -n 2>/dev/null|xargs dirname|xargs dirname)
export JAVA_HOME=$(/usr/libexec/java_home)
export GOROOT=/usr/local/go
export GOPATH="${HOME}/go"
export HISTCONTROL=ignoredups
export MAVEN_HOME=/opt/apache-maven-3.3.3  # example of fixed path
export MAVEN_HOME="$(mvn -v 2>/dev/null|grep -i 'maven home:'|awk '{print $3,$4,$5,$6}')"
export MYSQL_HOME=/usr/local/Cellar/mysql55/5.5.44  # example of fixed path
export MYSQL_HOME="$(dirname "$(dirname "$(which mysql||echo '')" )" )"
export SONAR_RUNNER_HOME=/var/lib/sonar-runner-2.4

export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'
export PATH="$MYSQL_HOME/bin:$MAVEN_HOME/bin:$SONAR_RUNNER_HOME/bin:$PATH"
# export PATH="/usr/local/bin:$PATH"
export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
export PATH="$JAVA_HOME/bin:$PATH" # Add java
export PATH="$GOPATH/bin:$PATH" # Add golang

alias a="alias|cut -d' ' -f 2- "
alias apache='httpd -v; sudo apachectl '
alias bashrc='source ~/.bash_profile; title ${PWD##*/};'
alias bu='brew upgrade; brew update --debug --verbose'
alias cdp='cd -P .'
alias clean='find . -name \*.pyc -o -name .DS_Store -delete'
alias cls='clear && printf "\e[3J"'
alias dir='ls -al '
alias dsclean='sudo find . -name *.DS_Store -type f -delete'
alias envi='env | grep -i '
alias exif='exiftool -sort -s'
alias fixmod='for f in *; do if [[ -d "$f" ]] || [[ "${f##*.}" == "sh" ]]; then chmod 755 "$f"; else chmod 644 "$f"; fi; done'
alias gbc='git symbolic-ref --short -q HEAD'
alias gbd='git branch -d '  # delete branch locally
alias gbdo='git push origin --delete '  # delete branch on origin
alias gbv="git branch -v "
alias gco="git checkout "
alias gfv="git fetch -v --all --prune "
alias glg="git log --graph --pretty=format:'%C(magenta)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
alias gpum='git pull upstream master'
alias grm='git rebase master'
alias grmgpf='git rebase master; git push --force'
alias grv='git remote -v'
alias gst='git status'
alias gotraining='goto gotraining'
alias goback='cd ${GOPATH}/$(cut -d/ -f2,3,4 <<< "${PWD/$GOPATH/}")'
alias gopath='cd -P ${GOPATH} && pwd'
alias ip='echo $(ipconfig getifaddr en0) $(dig +short myip.opendns.com @resolver1.opendns.com)'
alias ipy='ipython'
alias ll='ls -al'
alias lll='ls -al --time-style=full-iso'
alias lg='dscl . list /groups | grep -v "_"'
alias lgv='dscacheutil -q group' # -a name staff
alias lsofi='lsof -i -n -P'
alias lu='dscl . list /users | grep -v "_"'
alias luv='dscacheutil -q user' # -a name $USER
alias ml="make -qp|awk -F':' '/^[a-zA-Z0-9][^\$#\/\t=]*:([^=]|\$)/ {split(\$1,A,/ /);for(i in A)print A[i]}'|sort"
alias path='echo $PATH|tr ":" "\n"'
alias server='python -m SimpleHTTPServer'
alias setp='(set -o posix; set|grep -v _xspec)'
alias showhidden='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias si='echo -e $(for k in ~/.ssh/*.pub;do echo -e "\\\n$(ssh-keygen -E md5 -lf $k) - $k";done)|sort -k 3; echo;echo "--- Added identities ---"; ssh-add -E md5 -l|sort -k 3'
alias ver='echo -e "$(uname -a)"; echo ""; echo -e "$(bash --version)"'
alias t='title ${PWD##*/}'



# docker-machine
export DOCKER_USERNAME="${DOCKER_USERNAME:-${USER}}"
export DOCKER_PASSWORD="${DOCKER_PASSWORD:-***********}"
export GITHUB_USERNAME="${GITHUB_USERNAME:-${USER}}"
export GITHUB_PASSWORD="${GITHUB_PASSWORD:-***********}"

echo "Loading more bash aliases ..."
alias dm="docker-machine "
alias dme="docker-machine env default"
alias dmip="docker-machine ip default"
alias dclean='docker kill $(docker ps -aq); docker rm -f -v $(docker ps -aq); docker rmi -f $(docker images -aq)'
alias di="docker images -a"
alias didangling="docker images -a --filter dangling=true"
alias dlogs="docker logs -ft "
alias dps="docker ps -a"
alias drm="docker rm -f -v"
alias drmi="docker rmi -f "
alias nr="npm run "


############################################################
# function: Main
############################################################
function main() {

  # echo "Login to docker with ${DOCKER_USERNAME}..."
  # docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}

  fixpath
}

############################################################
# function: Output a relative path to absolute path
############################################################
function abspath() {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then thePath="$PWD/$1"; else thePath="$1"; fi
  echo "$thePath"|(
  IFS=/
  read -a parr
  declare -a outp
  for i in "${parr[@]}";do
    case "$i" in
    ''|.) continue ;;
    ..)
      len=${#outp[@]}
      if ((len!=0));then unset outp[$((len-1))]; else continue; fi
      ;;
    *)
      len=${#outp[@]}
      outp[$len]="$i"
      ;;
    esac
  done
  echo /"${outp[*]}"
  )
}

############################################################
# function: Add $1 (a dir path) to $PATH, if not added yet
############################################################
function addtopath() {
    if [ -d "$1" ] && [[ ! "$PATH" =~ (^|:)"${1}"(:|$) ]]; then
      export PATH+=:$1
    fi
}

############################################################
# function: Print file info
############################################################
function fileinfo() {
  for file in "$@"; do
    path=$(abspath "$file")

    # strip longest match of */ from start
    name="${file##*/}"

    # substring from 0 thru pos of filename
    dir_="${file:0:${#file} - ${#name}}"

    # strip shortest match of . plus at least one non-dot char from end
    base="${name%.[^.]*}"

    # substring from len of base thru end
    ext_="${name:${#base} + 1}"

    size=$((
      du --apparent-size --block-size=1 "$file" 2>/dev/null ||
      gdu --apparent-size --block-size=1 "$file" 2>/dev/null ||
      find "$file" -printf "%s" 2>/dev/null ||
      gfind "$file" -printf "%s" 2>/dev/null ||
      stat --printf="%s" "$file" 2>/dev/null ||
      stat -f%z "$file" 2>/dev/null ||
      wc -c <"$file" 2>/dev/null
    ) | awk '{print $1}')

    # in case of an extension without base, it's really the base
    if [[ -z "$base" && -n "$ext_" ]]; then
      base=".$ext_"
      ext=""
    fi
    if [[ "${dir_}" == "" ]]; then
      dir_=${path%/*}
    fi
    echo -e "------------------------------------------------------------"
    echo -e "\t file : $file"
    echo -e "\t path : $path"
    echo -e "\t  dir : $dir_"
    echo -e "\t base : $base"
    echo -e "\t  ext : $ext_"
    echo -e "\t size : $size"
  done
}

############################################################
# function: Remove duplicates in $PATH variable
############################################################
function fixpath() {
  # remove duplicates in $PATH
  export PATH=$(perl -e 'print join ":", grep {!$h{$_}++} split ":", $ENV{PATH}')
  export PATH=$(printf %s "$PATH" | awk -v RS=: -v ORS=: '!arr[$0]++')
  export PATH=$(printf %s "$PATH" | awk -v RS=: -v ORS=: '{ if (!arr[$0]++) { print $0 } }')
  export PATH=$(printf %s "$PATH" | awk -v RS=: '{ if (!arr[$0]++) {printf("%s%s",!ln++?"":":",$0)}}')
  echo $PATH|tr ":" "\n"
}

############################################################
# function: Rename git branch name locally and on origin
############################################################
function gb-rename() {
  echo "Fetching git branches ..."
  git fetch -v --all --prune
  echo ""

  local old_name=$1
  local new_name=$2
  # get current branch, optionally using:
  #   - `git branch --no-color | grep -E '^\*' | awk '{print $2}'`
  #   - `git symbolic-ref --short -q HEAD`)
  local current_branch="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"
  echo "Current branch: ${current_branch}"
  echo ""

  if [[ "$2" == "" ]]; then
    echo "Missing argument(s) on renaming git branch: "
    echo ""
    echo "${FUNCNAME} old_name new_name"
    echo ""
    return -2
  fi

  if [[ "$1" == "master" ]] || [[ "$2" == "master" ]]; then
    echo "Cannot rename 'master' branch."
    echo ""
    return -1
  fi

  if [[ "$1" == "${current_branch}" ]] || [[ "$2" == "${current_branch}" ]]; then
    echo "Currently on branch [${current_branch}] to be renamed: "
    echo ""
    echo "${FUNCNAME} $1 $2"
    echo ""
    return 9
  fi

  local chk_name=""
  for b in $(git branch --no-color | grep -E '^ '); do
    if [[ "${b}" == "${new_name}" ]]; then
      echo "Branch name [${new_name}] already exists."
      echo ""
      return 2
    fi
    if [[ "${b}" == "${old_name}" ]]; then
      chk_name="${old_name}"
    fi
  done

  if [[ "${chk_name}" == "" ]]; then
    echo "Cannot find branch [${old_name}]. Please fetch and sync to origin."
    echo ""
    return 1
  fi

  git branch -m ${old_name} ${new_name}
  git push origin :${old_name} ${new_name}
  git push origin -u ${new_name}

  echo ""
  echo "Done."
  echo ""
}

############################################################
# function: Delete git branch locally and on origin/remote
############################################################
function gbd-all() {
  if [[ "$1" != "" ]] && [[ "$1" != "master" ]]; then
    git push origin --delete $1
    git branch -d $1
  else
    echo "Missing valid branch name in argument."
    echo ""
  fi
  git fetch --all --prune
  git branch -v
}

############################################################
# function: Find a directory in $GOPATH/src and change to it
############################################################
function goto() {
  cd $(find $GOPATH/src -type d -name "$1" 2>/dev/null | head -n 1)
}

############################################################
# function: List members for a spcific group
############################################################
function members () {
  dscl . -list /Users | while read user; do printf "$user "; dsmemberutil checkmembership -U "$user" -G "$*"; done | grep "is a member" | cut -d " " -f 1;
}

############################################################
# function: Add title to current terminal
############################################################
function title() {
  if [ $# -eq 0 ]; then
    # export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'
    export PROMPT_COMMAND='echo -ne "\033]0;${PWD##*/~}\007"'
  else
    TITLE=$*;
    export PROMPT_COMMAND='echo -ne "\033]0;$TITLE\007"'
    # echo -ne "\033]0;"$*"\007"
  fi
}

############################################################
# function: Executes command with a timeout
# Params:
#   $1 timeout in seconds
#   $2 command
# Returns 1 if timed out 0 otherwise
############################################################
function timeout() {
    time=$1
    # start the command in a subshell to avoid problem with pipes
    # (spawn accepts one command)
    command="/bin/sh -c \"$2\""
    expect -c "set echo \"-noecho\"; set timeout $time; spawn -noecho $command; expect timeout { exit 1 } eof { exit 0 }"
    if [ $? = 1 ] ; then
        echo "Timeout after ${time} seconds"
    fi
}

############################################################
# function: Start license server for IntelliJ
# note: the original binary must be decompressed to run on Sierra
#       brew install upx
#       upx -d IntelliJIDEALicenseServer_darwin_amd64
############################################################
function lic() {
  local OS=$(echo $(uname)|tr '[:upper:]' '[:lower:]')
  local ARCH=$([[ "$(uname -m)" == "x86_64" ]] && echo amd64 || echo x86)
  local LIC_TCPORT=7923
 #local LIC_LISTEN="$(netstat -anv tcp | grep *.${LIC_TCPORT})"
  local LIC_LISTEN="$(lsof -ani| grep *:${LIC_TCPORT} | awk '{print $9}')"
  local LIC_INTLIJ="$HOME/My/archive/JetbrainsLicense/IntelliJIDEALicenseServer"
  local LIC_DARWIN="${LIC_INTLIJ}/IntelliJIDEALicenseServer_${OS}_${ARCH}"
  local LIC_SERVER="http://127.0.0.1:${LIC_TCPORT}"

  if [[ -x "${LIC_DARWIN}" ]]; then
    if [[ "${LIC_LISTEN}" == "" ]]; then
      rm -rf $LIC_INTLIJ/nohup.out # output by ```nohup cmd & ```
      #echo ${LIC_DARWIN} -p ${LIC_TCPORT} -u $USER
      nohup ${LIC_DARWIN} -p ${LIC_TCPORT} -u $USER >${LIC_INTLIJ}/nohup.out 2>&1 &
      cat ${LIC_INTLIJ}/nohup.out
    else
      echo "License server is on: ${LIC_LISTEN} [${LIC_SERVER}]"
      echo ""
    fi
  fi
}

############################################################


# lic

# source ~/gh/git-subrepo/.rc

main $@
